-- Create Account table
CREATE TABLE Account (
    Account_No NUMBER PRIMARY KEY,
    Cust_Name VARCHAR2(50),
    Balance NUMBER(10, 2),
    NoOfYears NUMBER
);

-- Create Earned_Interest table
CREATE TABLE Earned_Interest (
    Account_No NUMBER,
    Interest_Amt NUMBER(10, 2),
    );




INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) 
VALUES (101, 'Alice Johnson', 60000, 3);

INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) 
VALUES (102, 'Bob Smith', 45000, 2);

INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) 
VALUES (103, 'Charlie Brown', 75000, 4);

INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears) 
VALUES (104, 'David Lee', 32000, 1);

COMMIT;

-------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE calculate_interest (v_account_no IN NUMBER,v_interest_rate IN NUMBER) IS
    v_balance NUMBER;
    v_years NUMBER;
    v_interest_amt NUMBER;
BEGIN
    -- Fetch balance and years for the given account number
    SELECT Balance, NoOfYears INTO v_balance, v_years
    FROM Account
    WHERE Account_No = v_account_no;

    -- Calculate simple interest
    v_interest_amt := v_balance * (v_interest_rate / 100) * v_years;

    -- Insert the calculated interest into the Earned_Interest table
    INSERT INTO Earned_Interest (Account_No, Interest_Amt)
    VALUES (v_account_no, v_interest_amt);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Interest calculated and stored successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Account not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/



BEGIN
    calculate_interest(101, 5); -- Account_No: 101, Interest Rate: 5%
END;
/

BEGIN
    calculate_interest(103, 4); -- Account_No: 103, Interest Rate: 4%
END;
/

-------------------------------------------------------------------------------------------------------------------------

create or replace function get_high_balance_accounts
return varchar is
result varchar(5000);
begin
    for acc in (select account_no,cust_name,balance,noofyears from account where balance >50000 ) loop
    result := result ||'Account number is: '||acc.account_no||'Customer name is:'||acc.cust_name||'Balance is: '||acc.balance||'No of years are: '||acc.noofyears;
    end loop;
    return result;
end;
set serveroutput on;
DECLARE
    result VARCHAR2(4000);
BEGIN
    -- Call the function to get accounts with balance > 50,000
    result := get_high_balance_accounts;
    
    -- Output the result to the console
    DBMS_OUTPUT.PUT_LINE(result);
END;
/
