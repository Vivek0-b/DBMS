db.Book.insertMany([
...     { Title: "Book1", Author_name: "Author1", Borrowed_status: true, Price: 350 },
...     { Title: "Book2", Author_name: "Author2", Borrowed_status: false, Price: 150 },
...     { Title: "Book3", Author_name: "Author1", Borrowed_status: true, Price: 400 },
...     { Title: "Book4", Author_name: "Author3", Borrowed_status: false, Price: 500 },
...     { Title: "Book5", Author_name: "Author2", Borrowed_status: true, Price: 200 },
...     { Title: "Book6", Author_name: "Author1", Borrowed_status: true, Price: 300 }
... ]);




var mapFunction1= function() {emit(this.Author_name, this.Title);};
var reduceFunction1= function(key,values) {return values;};
db.Book.mapReduce(mapFunction1, reduceFunction1, {out: "authorwise"});
db.authorwise.find().pretty();












LibraryDB> db.Book.mapReduce(
...   function() {if (this.Borrowed_status === true) { .emit(this.Author_name, this.Title);}},
...   function(key, values) {return values;  },
...   { out: "borrowed_books_by_author" });
 db.borrowed_books_by_author.find().pretty();


//db.Book.mapReduce(   function() {if (this.Borrowed_status === true) { emit(this.Author_name, this.Title);}}, function(key, values) {return values;  }, { out: "borrowed_books_by_author" }); db.borrowed_books_by_author.find().pretty();










db.Book.mapReduce(function() {if (this.Price > 300) {   emit(this.Author_name, this.Title); }},function(key, values) { return values;  },{out: "books_price_above_300"   });
LibraryDB> db.books_price_above_300.find().pretty();





-------------------------------------------------------------------------------------------------------------------------







db.Book.mapReduce(
  function() {
    emit(this.Author_name, this.Title);  // Map function: emit the author name as the key and the book title as the value.
  },
  function(key, values) { 
    return values;  // Reduce function: return the list of books.
  },
  {
    out: "author_books_list"  // Output collection name
  }
);

// Display the result
db.author_books_list.find().pretty();







db.Book.mapReduce(
  function() {
    if (this.Borrowed_status === true) {  // Only process books with Borrowed_status = true.
      emit(this.Author_name, this.Title);  // Emit author name as key, book title as value.
    }
  },
  function(key, values) {
    return values;  // Return the list of books.
  },
  {
    out: "borrowed_books_by_author"  // Output collection name
  }
);

// Display the result
db.borrowed_books_by_author.find().pretty();













db.Book.mapReduce(
  function() {
    if (this.Price > 300) {  // Only process books with price greater than 300.
      emit(this.Author_name, this.Title);  // Emit author name as key, book title as value.
    }
  },
  function(key, values) {
    return values;  // Return the list of books.
  },
  {
    out: "books_price_above_300"  // Output collection name
  }
);

// Display the result
db.books_price_above_300.find().pretty();
